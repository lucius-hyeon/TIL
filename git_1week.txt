<aside>
💡 Git

</aside>

- git : 버전관리 협업관리를 위한 도구
- github : 저장소 기능 커뮤니티 기능
- sourcetree : git을 편하게 사용하기 위한 도구

## 1. Commit

- commit은 현재 프로젝트의 상태를 저장
- add(staging) : 원하는 파일만 골라서 commit
- commit 정리하기
    1. 버전관리를 한다는건 어떤 의미일까?
        1. 프로젝트 상태가 변경되는 정보를 알고 있다는것
        2. Git 은 commit 을 사용해서 버전이 달라지는 것을 관리
    2. 작업내역 단위인 commit 에는 어떤 정보가 포함되어 있어야 잘 버전관리를 할 수 있을까?
        1. commit (현재 프로젝트의 상태를 저장)
            1. 프로젝트 변경 내용과 누가 언제 변경했는지 정보
            2. 작업내역을 적은 메세지를 ‘commit 메세지’
            3. add(staging) : 원하는 파일만 골라서 commit
            4. history : commit 한 기록
            5. commit id : 사용자 아이디처럼 commit 에 부여된 유일한 값
    3. 지금까지 우리가 실습은 어떤 순서로 했었지?
        1. git 초기화하기(initialize) → add(staging) → commit

## 2. 원격 repo 사용

- 클론(clone) local 경로 설정시 경로파일 안에 아무것도 있어서 안된다 → 빈 새파일 생성후 클론
    
    빈 새파일은 클론하고자하는 프로젝트 이름과 동일하면 좋다
    
- 원격 repo 트래킹 시 원격 이름은 디폴트(origin)으로 쓰는 것이 관례이다
- 원격 repo 정리
    1. 원격 repo 와 로컬 repo 를 연결해서 내용을 반영하기
        1. 로컬 repo에 파일이 없을 때 (신규 프로젝트) 원격 repo 에서 clone 한다
        2. 로컬, 원격 repo 가 둘다 있는 경우 원격 repo를 트래킹(tracking) 하도록 설정
    2. 원격 repo 와 로컬 repo 가 따로 있는 이유
        1. 협업을 하기 위한 목적
        2. 하나의 원격 repo에 다수의 로컬 repo 연결이 가능하기 때문
            1. 하나의 프로젝트를 동시에 작업하기가 가능하기 때문
            2. 필요한 파일을 골라 병합해서 push
    3. push 와 pull 의 개념
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f6debc26-99c5-438b-af3e-a6a6892f9648/Untitled.png)